# -*- coding: utf-8 -*-
"""Heart.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Li5Bkp486-38_Z1RSeB1cbvfu6zEWwS
"""

import pandas as pd

heart = pd.read_csv('/content/heart (2).csv')
heart.head()

heart_new1 = heart.copy()                                                # Create copy of pandas DataFrame
heart_new1['HeartDisease'] = heart_new1['HeartDisease'].map({1: 'With Heart Disease', 0: 'Without Heart Disease'})  # Replace boolean by string
print(heart_new1)

heart_new1

del heart_new1['ChestPainType']

del heart_new1['FastingBS']

del heart_new1['RestingECG']

del heart_new1['ExerciseAngina']

del heart_new1['Oldpeak']

del heart_new1['ST_Slope']

heart_new1

print(type(heart_new1))

heart_new1.info()

heart_new1.shape

heart_new1.describe

X1 = pd.DataFrame(heart_new1['Age'])
y1 = heart_new1['Cholesterol']


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size = 0.25, random_state = 0)


from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train) 
y1_pred = model.predict(X_test)


from sklearn.metrics import mean_squared_error, r2_score

print(f"RMSE: {(mean_squared_error(y_test, y1_pred))**0.5}")
print(f"R^2: {r2_score(y_test, y1_pred):.4f}")

import matplotlib.pyplot as plt

plt.scatter(X_test, y_test, color='black')
plt.plot(X_test, y1_pred, color='blue', linewidth=1)
plt.xlabel("Age")
plt.ylabel("Cholesterol")

plt.title('Age vs Cholesterol')
plt.show()

heart_new1.head()

#split dataset in features and target variable
feature_cols = ['Age', 'Cholesterol']
x = heart_new1[feature_cols] # Features
y = heart_new1.HeartDisease # Target variable

y

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)
x_train, x_test, y_train, y_test

from sklearn.linear_model import LogisticRegression

# instantiate the model (using the default parameters)
logreg = LogisticRegression(random_state=0)

logreg.fit(x_train, y_train)

y_pred = logreg.predict(x_test)

from sklearn import metrics

cnf_matrix = metrics.confusion_matrix(y_test, y_pred)
cnf_matrix

# import required modules
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

class_names=[0,1] # name  of classes
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)

sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')

from sklearn.metrics import classification_report
target_names = ['without heartdisease', 'with heartdisease']
print(classification_report(y_test, y_pred, target_names=target_names))

from sklearn.metrics import accuracy_score
accuracy_score(y_test, y_pred)